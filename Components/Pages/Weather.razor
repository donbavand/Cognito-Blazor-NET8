@page "/weather"
@using System.Text.Json
@using BlazorWebAppCognito.Services
@using Microsoft.AspNetCore.Authorization
@attribute [StreamRendering]
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private WeatherService.WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        var httpClient = HttpClientFactory.CreateClient("AuthenticatedClient");
        try
        {
            var response = await httpClient.GetAsync("/weatherforecast");

            if (response.IsSuccessStatusCode)
            {
                forecasts = await response.Content.ReadFromJsonAsync<WeatherService.WeatherForecast[]>();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
            }
            else
            {
                Console.WriteLine($"HTTP error: {response.StatusCode}");
            }
        }
        catch (Exception ex) when (ex is HttpRequestException || ex is NotSupportedException || ex is JsonException)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

}